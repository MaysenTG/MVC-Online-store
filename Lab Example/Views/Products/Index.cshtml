@*@model IEnumerable<Lab_Example.Models.Product>*@
@model assignment_2_20010223.ViewModels.ProductIndexViewModel
@using PagedList.Mvc
@Styles.Render("~/Content/store-template.css")

@{
    ViewBag.Title = "Products";
}

<br />
<img src="/Content/Media-Images/View our collection of technology.png" alt="..." width="100%" />
<br />

<h2>@ViewBag.Title</h2>

<div>
    @(String.IsNullOrWhiteSpace(Model.Search) ? "Showing all" : "Your search for \"" + Model.Search + "\" found") @Model.Products.TotalItemCount products

    @if (User.Identity.IsAuthenticated)
    {@Html.ActionLink("Create New", "Create")}
    <br />
    <div style="width: 100%; display: flex; justify-content: flex-start; margin-top: 10px">
        @using (Html.BeginForm("Index", "Products", FormMethod.Get))
    {
        <div style="width: 100%; display: flex; justify-content: flex-start">
            <div>
                <label>Filter by category:</label>

                @Html.DropDownListFor(vm => vm.Category, Model.CatFilterItems, "All", new { onchange = "$(this.form).submit();", @class="form-control" })
            </div>

            <div style="margin-right: 10px; margin-left: 10px">
                <label>Sort By:</label>
                @Html.DropDownListFor(vm => vm.SortBy, new SelectList(Model.Sorts, "Value", "Key"), "Default", new { onchange = "$(this.form).submit();", @class="form-control" })

                @*<input type="hidden" name="Search" id="Search" value="@ViewBag.Search" />*@
                <input type="hidden" name="Search" id="Search" value="@Model.Search" />
            </div>
        </div>
    }


        <div style="width: 100%; display: inline-flex; flex-direction: row">
            @using (Html.BeginForm("Index", "Products", FormMethod.Get, new { @class = "placeholder" }))
                {
            <label>Search</label>
            <div class="form-group" style="display: flex; flex-direction: row">
                @Html.TextBox("Search", null, new { @class = "form-control", @placeholder = "Search Products" }) &nbsp;
                <button type="submit" class="btn btn-default">Submit</button>
            </div>


                }

        </div>
    </div>

</div>

<div class="row">

    @*@foreach (var item in Model)*@
    @foreach (var item in Model.Products)
    {

    <div class="col-sm-6 col-md-4">
        <div class="thumbnail">
            @if (item.ProductImageMappings != null && item.ProductImageMappings.Any())
            {
                <img src="@(Url.Content(Constants.ProductThumbnailPath) + item.ProductImageMappings.OrderBy(pim => pim.ImageNumber).ElementAt(0).ProductImage.FileName)" class="img-responsive" alt="...">
            }
                <div class="caption">
                    <h3>@Html.DisplayFor(prdct => item.Name)</h3>
                    @*<p>@Html.ActionLink(prdct => item.Category.Name, "Index", "Products", new { category = item.Category.Name }, null)</p>*@
                    <h4><strong>@Html.DisplayFor(prdct => item.Price)</strong></h4>
                    <p style="max-width: 150ch; overflow: hidden; white-space: nowrap; text-overflow: ellipsis">@Html.DisplayFor(prdct => item.Description)</p>
                    <p>
                        <a href="#" class="btn btn-primary" role="button">Add to cart</a>
                        @Html.ActionLink("Details", "Details", new { id = item.ID }, new { @class = "btn btn-default" })
                        @if (User.Identity.IsAuthenticated)
                        {
                        <p>
                            @Html.ActionLink("Edit", "Edit", new { id = item.ID }) |
                            @Html.ActionLink("Delete", "Delete", new { id = item.ID })
                        </p>
                    }
                    </div>
                </div>
        </div>
    }
</div>

@* Pager *@
<div>
    Page @(Model.Products.PageCount < Model.Products.PageNumber ? 0 : Model.Products.PageNumber) of @Model.Products.PageCount
    @Html.PagedListPager(Model.Products, page => Url.Action("Index", new { category = @Model.Category, search = @Model.Search, sortBy = @Model.SortBy, page }))
</div>
